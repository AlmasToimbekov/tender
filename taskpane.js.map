{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/taskpane.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/enrich-data.ts","webpack://office-addin-taskpane/./src/taskpane/create-views.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \"<!DOCTYPE html> <html lang=\\\"ru\\\"> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"/> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" alt=\\\"Tender\\\" title=\\\"Tender\\\"/> </header> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <div class=\\\"button-container\\\"> <div role=\\\"button\\\" id=\\\"enrichData\\\" class=\\\"button button-primary\\\"> <span class=\\\"button-label\\\">Получить данные</span> </div> <div role=\\\"button\\\" id=\\\"createViews\\\" class=\\\"button button-secondary\\\"> <span class=\\\"button-label\\\">Создать виды для текущего листа</span> </div> </div> <h2 class=\\\"ms-font-xl\\\">Правила работы с расширением</h2> <ul class=\\\"ms-List ms-welcome__features\\\"> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--UnstackSelected ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Выделите нужные строки, где указаны БИНы для которых нужно обновить данные. При большом количестве запросов, источник данных может временно заблокировать отправку.</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Calculator ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Нажмите кнопку \\\"Получить данные\\\"</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Design ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Столбцы A-F используются для текущей информации, новые столбцы будут добавлены справа. Первая строка используется для заголовков. Изменяя эту структуру повышается риск неисправной работы приложения. При необходимости модификаций может потребоваться изменение кода.</span> </li> <li class=\\\"ms-ListItem\\\"> <i class=\\\"ms-Icon ms-Icon--Copy ms-font-xl\\\"></i> <span class=\\\"ms-font-m\\\">Когда нужные данные получены и таблица готова для анализа, нажмите кнопку \\\"Создать виды для текущего листа\\\", чтобы отобразить текущий лист на новые листы с отдельной сортировкой столбцов.</span> </li> </ul> </main> </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n  url = String(url.__esModule ? url.default : url);\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","import { CompanyFullInfo, BasicInfo, AddressInfo } from \"../types\";\r\n\r\n/* global Excel */\r\n\r\nexport async function enrichData() {\r\n  const enrichButton = document.getElementById(\"enrichData\") as HTMLButtonElement;\r\n  enrichButton.disabled = true; // Disable the button\r\n  enrichButton.classList.add(\"disabled\"); // Add a class for styling\r\n\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      const range = context.workbook.getSelectedRange();\r\n      range.load(\"rowIndex, rowCount\");\r\n      await context.sync();\r\n\r\n      // Calculate the new range address (columns A to F)\r\n      const startRow = range.rowIndex + 1; // Excel row indices are 1-based\r\n      const endRow = startRow + range.rowCount - 1;\r\n      const newRangeAddress = `A${startRow}:F${endRow}`;\r\n\r\n      // Get the new range that spans columns A to F\r\n      const newRange = context.workbook.worksheets.getActiveWorksheet().getRange(newRangeAddress);\r\n      newRange.load(\"values\");\r\n      await context.sync();\r\n\r\n      // Extract IDs from the new range\r\n      const ids = newRange.values.map((row) => row[2]); // Assuming the ID is in the third column (index 2)\r\n\r\n      // Fetch data for the extracted IDs\r\n      const data = await fetchData(ids);\r\n\r\n      // Populate Excel with the fetched data\r\n      await populateExcel(data, newRangeAddress);\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  } finally {\r\n    enrichButton.disabled = false; // Re-enable the button\r\n    enrichButton.classList.remove(\"disabled\"); // Remove the class for styling\r\n  }\r\n}\r\n\r\nasync function fetchData(ids: string[]): Promise<CompanyFullInfo[]> {\r\n  const defaultBasicInfo: BasicInfo = {\r\n    isDeleted: false,\r\n    registrationDate: { value: null },\r\n    onMarket: null,\r\n    ceo: { value: { title: \"\" } },\r\n    primaryOKED: { value: \"\" },\r\n    secondaryOKED: { value: null },\r\n    addressRu: { value: \"\" },\r\n  };\r\n\r\n  const fetchPromises = ids.map(async (id) => {\r\n    if (!id) {\r\n      return {\r\n        basicInfo: defaultBasicInfo,\r\n        gosZakupContacts: null,\r\n      } as CompanyFullInfo;\r\n    }\r\n\r\n    const response = await fetch(`https://apiba.prgapp.kz/CompanyFullInfo?id=${id}&lang=ru`, {\r\n      headers: {\r\n        accept: \"*/*\",\r\n        \"accept-language\": \"en-GB,en-US;q=0.9,en;q=0.8,ru;q=0.7\",\r\n        priority: \"u=1, i\",\r\n        \"sec-ch-ua\": '\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"',\r\n        \"sec-ch-ua-mobile\": \"?0\",\r\n        \"sec-ch-ua-platform\": '\"Windows\"',\r\n        \"sec-fetch-dest\": \"empty\",\r\n        \"sec-fetch-mode\": \"cors\",\r\n        \"sec-fetch-site\": \"cross-site\",\r\n        Referer: \"https://ba.prg.kz/\",\r\n        \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\r\n      },\r\n      body: null,\r\n      method: \"GET\",\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Error fetching data for ID ${id}: ${response.statusText}`);\r\n    }\r\n\r\n    const data: CompanyFullInfo = await response.json();\r\n    return data;\r\n  });\r\n\r\n  const results = await Promise.allSettled(fetchPromises);\r\n\r\n  return results.map((result) => {\r\n    if (result.status === \"fulfilled\" && !(result.value instanceof Error)) {\r\n      return result.value;\r\n    } else {\r\n      const error = result.status === \"rejected\" ? result.reason : result.value;\r\n      return {\r\n        basicInfo: {\r\n          ...defaultBasicInfo,\r\n          ceo: { value: { title: error.message ?? error } },\r\n        },\r\n        gosZakupContacts: null,\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nasync function populateExcel(data: CompanyFullInfo[], selectedRangeAddress: string) {\r\n  // Map the data to the desired columns\r\n  const mappedData = data.map((result) => {\r\n    const address = extractCityAndRegion(result.basicInfo.addressRu.value);\r\n\r\n    return [\r\n      result.basicInfo.isDeleted ? \"Организация удалена в источниках\" : result.basicInfo.ceo.value?.title ?? \"\",\r\n      result.basicInfo.addressRu.value ?? \"\",\r\n      address?.city ? address.city : address?.region ?? \"\",\r\n      result.gosZakupContacts?.phone ? result.gosZakupContacts.phone.map((item) => item.value).join(\"; \") : \"\",\r\n      result.basicInfo.registrationDate.value ?? \"\",\r\n      result.basicInfo.primaryOKED.value ?? \"\",\r\n      result.basicInfo.secondaryOKED.value?.join(\"; \") ?? \"\",\r\n    ];\r\n  });\r\n\r\n  // Headers\r\n  const headers = [\"name\", \"address\", \"city\", \"phone\", \"registration\", \"primary\", \"secondary\"];\r\n\r\n  // Populate the Excel sheet\r\n  await Excel.run(async (context) => {\r\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\r\n    const selectedRange = sheet.getRange(selectedRangeAddress);\r\n    selectedRange.load(\"columnIndex, rowIndex, rowCount\");\r\n    await context.sync();\r\n\r\n    // Calculate the starting cell for the new data\r\n    const startColumn = 6; // Assuming the Date column is the 6th column (index 5)\r\n    const startRow = selectedRange.rowIndex;\r\n\r\n    // Insert headers\r\n    const headerRange = sheet.getRangeByIndexes(0, startColumn, 1, headers.length);\r\n    headerRange.values = [headers];\r\n\r\n    headerRange.copyFrom(sheet.getRange(\"A1\"), \"Formats\");\r\n\r\n    // Insert data\r\n    const dataRange = sheet.getRangeByIndexes(startRow, startColumn, mappedData.length, mappedData[0].length);\r\n    dataRange.values = mappedData;\r\n\r\n    dataRange.format.autofitColumns();\r\n\r\n    // Set fixed width and enable text wrapping for 'primary' and 'secondary' columns\r\n    const fixedWidthColumns = [1, 5, 6]; // Indexes of 'address', 'primary', and 'secondary' columns\r\n    const fixedWidth = 400;\r\n\r\n    fixedWidthColumns.forEach((index) => {\r\n      const columnRange = sheet.getRangeByIndexes(startRow, startColumn + index, mappedData.length + 1, 1);\r\n      columnRange.format.columnWidth = fixedWidth;\r\n      columnRange.format.wrapText = true;\r\n    });\r\n\r\n    await context.sync();\r\n  });\r\n}\r\n\r\nfunction extractCityAndRegion(address: string | null): AddressInfo | null {\r\n  if (!address) {\r\n    return null;\r\n  }\r\n  address = address.replace(/Г\\.А\\.,\\s*/g, \"\").toLowerCase();\r\n\r\n  // Define regular expressions for matching city and region\r\n  // const cityRegex = /Г\\.\\s*([А-ЯЁа-яё\\s]+)/;\r\n  const cityRegex = /(?:г\\.|город)\\s*([а-яё\\s]+)/;\r\n\r\n  const regionRegex = /([а-яё\\s]+(?:область))/;\r\n\r\n  // Extract city\r\n  const cityMatch = address.match(cityRegex);\r\n  const city = cityMatch ? cityMatch[1].trim().toUpperCase() : \"\";\r\n\r\n  // Extract region\r\n  const regionMatch = address.match(regionRegex);\r\n  const region = regionMatch ? regionMatch[1].trim().toUpperCase() : \"\";\r\n\r\n  return { city, region };\r\n}\r\n","/* global Excel */\r\n\r\nexport async function createViews() {\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\r\n\r\n      // Copy the contents from the original sheet to the new sheets\r\n      const originalRange = sheet.getUsedRange();\r\n      originalRange.load(\"values\");\r\n      await context.sync();\r\n\r\n      // Sheet names\r\n      const dateSheetName = \"по подаче\";\r\n      const priceSheetName = \"по цене\";\r\n      const addressSheetName = \"по адресу\";\r\n\r\n      // Remove sheets if they exist\r\n      await removeSheetIfExists(dateSheetName, context);\r\n      await removeSheetIfExists(priceSheetName, context);\r\n      await removeSheetIfExists(addressSheetName, context);\r\n\r\n      // Create and sort the sheets\r\n      await createAndSortSheet(sheet, addressSheetName, 8, context); // 9th column (city)\r\n      await createAndSortSheet(sheet, priceSheetName, 3, context); // 4th column (Цена за единицу)\r\n      await createAndSortSheet(sheet, dateSheetName, 5, context); // 6th column (Дата и время подачи заявки)\r\n\r\n      await context.sync();\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n// Function to remove a sheet if it exists\r\nasync function removeSheetIfExists(sheetName: string, context: Excel.RequestContext) {\r\n  const sheet = context.workbook.worksheets.getItemOrNullObject(sheetName);\r\n  await context.sync();\r\n\r\n  if (!sheet.isNullObject) {\r\n    sheet.delete();\r\n    await context.sync();\r\n  }\r\n}\r\n\r\n// Helper function to create and sort a sheet\r\nasync function createAndSortSheet(\r\n  originalSheet: Excel.Worksheet,\r\n  newSheetName: string,\r\n  sortColumn: number,\r\n  context: Excel.RequestContext\r\n) {\r\n  const newSheet = originalSheet.copy(Excel.WorksheetPositionType.after, originalSheet);\r\n  newSheet.name = newSheetName;\r\n\r\n  const newRange = newSheet.getUsedRange();\r\n  const dataRange = newRange.getResizedRange(-1, 0).getOffsetRange(1, 0);\r\n  dataRange.sort.apply([\r\n    {\r\n      key: sortColumn, // Column to sort by\r\n      ascending: true,\r\n    },\r\n  ]);\r\n\r\n  await context.sync();\r\n}\r\n","import { enrichData } from \"./enrich-data\";\nimport { createViews } from \"./create-views\";\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    const appBody = document.getElementById(\"app-body\");\n    if (appBody) {\n      appBody.style.display = \"flex\";\n    }\n\n    const enrichButton = document.getElementById(\"enrichData\");\n    if (enrichButton) {\n      enrichButton.onclick = enrichData;\n    }\n\n    const createViewsButton = document.getElementById(\"createViews\");\n    if (createViewsButton) {\n      createViewsButton.onclick = createViews;\n    }\n  }\n});\n"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","async","enrichData","enrichButton","getElementById","disabled","classList","add","Excel","run","range","context","workbook","getSelectedRange","load","sync","startRow","rowIndex","newRangeAddress","rowCount","newRange","worksheets","getActiveWorksheet","getRange","ids","values","map","row","data","defaultBasicInfo","isDeleted","registrationDate","value","onMarket","ceo","title","primaryOKED","secondaryOKED","addressRu","fetchPromises","id","basicInfo","gosZakupContacts","response","fetch","headers","accept","priority","Referer","body","method","ok","statusText","json","Promise","allSettled","result","status","error","reason","message","fetchData","selectedRangeAddress","mappedData","address","cityMatch","toLowerCase","match","city","trim","toUpperCase","regionMatch","region","extractCityAndRegion","phone","item","join","sheet","selectedRange","headerRange","getRangeByIndexes","copyFrom","dataRange","format","autofitColumns","forEach","index","columnRange","columnWidth","wrapText","populateExcel","console","remove","createViews","getUsedRange","dateSheetName","priceSheetName","addressSheetName","removeSheetIfExists","createAndSortSheet","sheetName","getItemOrNullObject","isNullObject","delete","originalSheet","newSheetName","sortColumn","newSheet","copy","WorksheetPositionType","after","name","getResizedRange","getOffsetRange","sort","apply","ascending","Office","onReady","info","host","HostType","appBody","style","display","onclick","createViewsButton","URL"],"sourceRoot":""}